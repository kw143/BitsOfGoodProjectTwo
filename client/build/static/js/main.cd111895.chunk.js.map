{"version":3,"sources":["serviceWorker.js","Todo.js","TodoList.js","InputLine.js","TodoApp.js","index.js"],"names":["Boolean","window","location","hostname","match","Todo","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","onClick","xClick","complete","task","cClick","React","Component","TodoList","_this","todos","map","curr","index","src_Todo","key","id","completed","todoXClick","_id","toggleComplete","InputLine","state","typedText","handleTyping","bind","assertThisInitialized","handleSubmit","onSubmit","setState","event","target","value","_this2","placeholder","className","type","onChange","TodoApp","addTodo","removeTodo","checkTask","componentDidMount","axios","post","apiUrl","then","response","data","catch","error","console","log","_this3","_this4","taskText","concat","_this5","get","src_InputLine","src_TodoList","ReactDOM","render","src_TodoApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd111895.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\n\r\nclass Todo extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <li>\r\n                <div>\r\n                    <button onClick={this.props.xClick}>x</button>\r\n                    <text>{(this.props.complete)?<strike>{this.props.task}</strike>: this.props.task}</text>\r\n                    <button onClick={this.props.cClick}>ChangeStatus</button>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from \"./Todo\";\r\n\r\n\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n        <ul>\r\n            {\r\n                this.props.todos.map((curr, index) => <Todo key={curr.id}task={curr.task} complete={curr.completed} xClick={() => this.props.todoXClick(curr._id)} cClick={() => this.props.toggleComplete(curr._id, curr.completed)}/>)\r\n            }\r\n        </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\n\r\n\r\n\r\nclass InputLine extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            typedText: \"\"\r\n        }\r\n        this.handleTyping = this.handleTyping.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit() {\r\n        this.props.onSubmit(this.state.typedText);\r\n        this.setState({\r\n            typedText: \"\"\r\n        })\r\n    }\r\n\r\n    handleTyping(event) {\r\n        this.setState({\r\n            typedText: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input placeholder=\"Text field\" value={this.state.typedText} className=\"form-control\" type=\"text\" onChange={(event) => this.handleTyping(event)}/>\r\n                <button onClick={this.handleSubmit}>Add Todo</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputLine;","import React from 'react';\r\nimport TodoList from \"./TodoList\";\r\nimport InputLine from \"./InputLine\";\r\nimport axios from \"axios\";\r\n\r\nconst apiUrl = \"/todos\";\r\n\r\nclass TodoApp extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        }\r\n        this.addTodo = this.addTodo.bind(this);\r\n        this.removeTodo = this.removeTodo.bind(this);\r\n        this.checkTask = this.checkTask.bind(this);\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    checkTask(id, complete) {\r\n        axios.post(apiUrl + \"/toggle\", {id: id, complete: complete})\r\n            .then((response) => {\r\n                this.setState({todos: response.data});\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    removeTodo(id) {\r\n        axios.post(apiUrl + \"/remove\", {id: id})\r\n            .then((response) => {\r\n                this.setState({todos: response.data});\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    addTodo(task) {\r\n        axios.post(apiUrl + '/add', {taskText: task, completed: false})\r\n            .then((response) => {\r\n                this.setState({ todos: this.state.todos.concat(response.data)});\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(apiUrl + '/all')\r\n            .then((response) => {\r\n                this.setState({todos: response.data});\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <InputLine onSubmit={this.addTodo}/>\r\n                <TodoList todos={this.state.todos} todoXClick={this.removeTodo} toggleComplete={this.checkTask}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport TodoApp from \"./TodoApp\";\n\nReactDOM.render(<TodoApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}